const openai = new OpenAI({
  baseURL: "https://openrouter.ai/api/v1",
  apiKey: OPENROUTER_API_KEY,
});

/**
 * Analyzes a food image and checks against user dietary restrictions
 * @param imageUri - The URI of the image to analyze
 * @param userRestrictions - Object containing user's dietary restrictions
 * @returns Analysis result with safety information
 */
export async function analyzeFoodImage(
  imageUri: string,
  userRestrictions: Record<string, boolean>
): Promise<AnalysisResult> {
  try {
    // Convert image to base64
    const base64Image = await imageToBase64(imageUri);

    // Get active restrictions
    const activeRestrictions = Object.entries(userRestrictions)
      .filter(([_, isActive]) => isActive)
      .map(([id]) => {
        const restriction = COMMON_RESTRICTIONS.find((r) => r.id === id);
        return restriction ? restriction.name : id;
      });

    // Create prompt for the AI
    const prompt = createAnalysisPrompt(activeRestrictions);

    // Call OpenRouter API using OpenAI SDK
    const analysis = await callOpenRouterAPI(base64Image, prompt);

    return processAnalysisResponse(analysis, activeRestrictions);
  } catch (error) {
    console.error("Error analyzing food image:", error);
    throw new Error("Failed to analyze food image. Please try again.");
  }
}

/**
 * Converts an image URI to base64
 */
async function imageToBase64(uri: string): Promise<string> {
  try {
    // Use Expo FileSystem to read the file
    const base64 = await FileSystem.readAsStringAsync(uri, {
      encoding: FileSystem.EncodingType.Base64,
    });

    return base64;
  } catch (error) {
    console.error("Error converting image to base64:", error);
    throw new Error("Failed to process image. Please try again.");
  }
}

/**
 * Creates a prompt for the AI based on user restrictions
 */
function createAnalysisPrompt(activeRestrictions: string[]): string {
  const restrictionsText =
    activeRestrictions.length > 0
      ? `The user has the following dietary restrictions: ${activeRestrictions.join(
          ", "
        )}.`
      : "The user has no specific dietary restrictions.";

  return `
    Analyze this food image and provide the following information:
    1. What food item(s) are in the image?
    2. List all identifiable ingredients.
    3. ${restrictionsText}
    4. Is this food safe for the user to eat based on their restrictions?
    5. If not safe, explain specifically which ingredients conflict with which restrictions.
    
    Format your response as JSON with the following structure:
    {
      "foodName": "Name of the food",
      "ingredients": ["ingredient1", "ingredient2", ...],
      "isSafe": true/false,
      "unsafeReasons": ["reason1", "reason2", ...],
      "description": "Brief explanation of the analysis"
    }
  `;
}

/**
 * Calls the OpenRouter API with the image and prompt
 */
async function callOpenRouterAPI(
  base64Image: string,
  prompt: string
): Promise<string> {
  try {
    const completion = await openai.chat.completions.create({
      model: "meta-llama/llama-4-maverick:free", // You can choose a different model
      messages: [
        {
          role: "user",
          content: [
            { type: "text", text: prompt },
            {
              type: "image_url",
              image_url: {
                url: `data:image/jpeg;base64,${base64Image}`,
              },
            },
          ],
        },
      ],
      max_tokens: 1000,
    });

    return completion.choices[0].message.content || "";
  } catch (error) {
    console.error("Error calling OpenRouter API:", error);
    throw new Error("Failed to analyze the image. Please try again.");
  }
}

/**
 * Processes the AI response into a structured format
 */
function processAnalysisResponse(
  analysisText: string,
  activeRestrictions: string[]
): AnalysisResult {
  try {
    // Try to extract JSON from the response
    const jsonMatch = analysisText.match(/\{[\s\S]*\}/);

    if (jsonMatch) {
      const jsonResponse = JSON.parse(jsonMatch[0]);
      return {
        isSafe: jsonResponse.isSafe,
        foodName: jsonResponse.foodName,
        ingredients: jsonResponse.ingredients || [],
        unsafeReasons: jsonResponse.unsafeReasons || [],
        description:
          jsonResponse.description || "No detailed description provided.",
      };
    }

    // Fallback if JSON parsing fails
    return {
      isSafe: false,
      foodName: "Unknown food",
      ingredients: [],
      unsafeReasons: ["Could not properly analyze the image"],
      description:
        "The AI could not properly analyze this image. Please try again with a clearer photo.",
    };
  } catch (error) {
    console.error("Error processing AI response:", error);
    return {
      isSafe: false,
      foodName: "Unknown food",
      ingredients: [],
      unsafeReasons: ["Error processing analysis"],
      description:
        "There was an error processing the analysis. Please try again.",
    };
  }
}
