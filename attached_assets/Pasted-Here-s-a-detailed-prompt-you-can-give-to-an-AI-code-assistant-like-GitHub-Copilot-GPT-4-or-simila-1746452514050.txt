Here‚Äôs a detailed prompt you can give to an AI code assistant (like GitHub Copilot, GPT-4, or similar tools) to build the AI Food Alert App using Node.js, Express, Vite, React, TailwindCSS, JavaScript, and Supabase:

‚∏ª

üß† Prompt for the AI Coder:

Build a modern AI-powered food app called ‚ÄúCan I Eat This?‚Äù using the following stack:
	‚Ä¢	Frontend: React (with Vite) + TailwindCSS
	‚Ä¢	Backend: Node.js + Express
	‚Ä¢	Database & Auth: Supabase
	‚Ä¢	AI Model: Use a pre-trained food classification model (e.g., from Food101 or Clarifai/FoodAI API)
	‚Ä¢	Deployment-ready and fully working with basic authentication and storage.

‚∏ª

‚ú® Key Features to Build:

1. User Authentication
	‚Ä¢	Email/password signup and login using Supabase
	‚Ä¢	On sign up, user should complete a dietary profile form:
	‚Ä¢	Allergies (e.g. peanuts, seafood, eggs)
	‚Ä¢	Dietary preference (e.g. vegetarian, halal, keto)
	‚Ä¢	Health restrictions (e.g. diabetes, hypertension)
	‚Ä¢	Store this profile in Supabase under each user

2. Food Upload & Image Classifier
	‚Ä¢	Frontend:
	‚Ä¢	Simple UI where user can upload or snap a food image
	‚Ä¢	Glassy, modern UI using TailwindCSS (with backdrop blur, shadows, rounded edges)
	‚Ä¢	Backend (Node.js):
	‚Ä¢	Receive uploaded image
	‚Ä¢	Send image to a food recognition API (like Clarifai or Google Vision API)
	‚Ä¢	Get back predicted food label (e.g., ‚ÄúSpaghetti Bolognese‚Äù)

3. Ingredient Matching
	‚Ä¢	Create or fetch a simple mapping of food ‚Üí ingredients (e.g., Spaghetti Bolognese ‚Üí pasta, beef, tomato, dairy)
	‚Ä¢	Cross-reference ingredients against user‚Äôs dietary profile
	‚Ä¢	Return response:

{
  "food": "Spaghetti Bolognese",
  "safe": false,
  "reason": "Contains dairy which you're allergic to",
  "ingredients": ["pasta", "beef", "tomato", "dairy"]
}



4. Result Display UI
	‚Ä¢	Show a result page with:
	‚Ä¢	Food name
	‚Ä¢	Safety status ‚úÖ / ‚ùå / ‚ö†Ô∏è
	‚Ä¢	Explanation (‚ÄúContains X‚Äù, ‚ÄúMay be high in sugar‚Äù)
	‚Ä¢	Ingredients list (optionally editable)
	‚Ä¢	‚ÄúLog this meal‚Äù button to store it in Supabase for diary/history tracking

5. User History/Diary
	‚Ä¢	Page to view past scanned meals and whether they were marked safe or not
	‚Ä¢	Allow the user to rate predictions and submit corrections

6. Daily Limit for Free Users
	‚Ä¢	Use Supabase row count or timestamp tracking to allow only 10 uploads per month
	‚Ä¢	Display upgrade prompt when limit is hit

‚∏ª

üì¶ Folder Structure Suggestion:

/client (React frontend)
/server (Express backend)



‚∏ª

üì≤ Tools & APIs to Use:
	‚Ä¢	Supabase: Auth, user profile, scan logs
	‚Ä¢	Food recognition:
	‚Ä¢	Option 1: Clarifai Food Model
	‚Ä¢	Option 2: Google Cloud Vision
	‚Ä¢	Option 3: Custom hosted TensorFlow.js model (for later)
	‚Ä¢	Email: Use EmailJS for confirmation/reminders (optional)
	‚Ä¢	Hosting: Netlify (frontend) + Render/Vercel (backend) or Railway

‚∏ª

üß™ Bonus AI Features (optional after MVP)
	‚Ä¢	GPT API to explain ingredients and dietary advice
	‚Ä¢	OCR model to read restaurant menus
	‚Ä¢	Suggest safer alternatives for unsafe dishes

‚∏ª

Would you like me to generate the actual starter code for the backend and frontend based on this prompt?